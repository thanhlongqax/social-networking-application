from flask import Flask, request, jsonify
from pyspark.sql import SparkSession
from pyspark.ml.recommendation import ALS
from pyspark.ml.feature import Word2Vec
from flask import Flask, request, jsonify
from pyspark.sql import SparkSession
from pyspark.ml.recommendation import ALS
from pyspark.sql.functions import col, from_json
from pyspark.sql.types import StructType, StructField, StringType, IntegerType
from kafka import KafkaConsumer, KafkaProducer
import json
from flasgger import Swagger
import json
import logging
import time
# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# T·∫°o Flask App
app = Flask(__name__)
swagger = Swagger(app)
# T·∫°o Spark Session
spark = SparkSession.builder.appName("PySparkService").getOrCreate()

# Kafka Config
KAFKA_BROKER = "broker:29092"

TOPIC_INTERACTION = "user_interactions"
TOPIC_INPUT = "user_interests"

TOPIC_OUTPUT = "friend_recommendations"

import json
import logging
import time
from kafka import KafkaConsumer, KafkaProducer, errors

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ƒê·ªãa ch·ªâ Kafka
KAFKA_BROKER = "broker:29092"

# C√°c topic
TOPIC_INTERACTION = "user_interactions"
TOPIC_INPUT = "user_interests"
TOPIC_OUTPUT = "friend_recommendations"

# H√†m ki·ªÉm tra Kafka c√≥ s·∫µn s√†ng hay kh√¥ng
def wait_for_kafka(broker, retries=10, delay=5):
    for i in range(retries):
        try:
            logging.info(f"üîÑ Th·ª≠ k·∫øt n·ªëi Kafka l·∫ßn {i+1}...")
            consumer = KafkaConsumer(bootstrap_servers=broker)
            consumer.close()
            logging.info("‚úÖ Kafka ƒë√£ s·∫µn s√†ng!")
            return
        except errors.NoBrokersAvailable:
            logging.warning(f"‚ùå Kafka ch∆∞a s·∫µn s√†ng, th·ª≠ l·∫°i sau {delay}s...")
            time.sleep(delay)
    logging.error("üö® Kh√¥ng th·ªÉ k·∫øt n·ªëi Kafka sau nhi·ªÅu l·∫ßn th·ª≠! Ki·ªÉm tra l·∫°i Kafka Broker.")
    exit(1)

# Ki·ªÉm tra Kafka tr∆∞·ªõc khi kh·ªüi t·∫°o consumer v√† producer
wait_for_kafka(KAFKA_BROKER)

# Kafka Consumer cho user interactions
try:
    consumer = KafkaConsumer(
        TOPIC_INTERACTION,
        bootstrap_servers=KAFKA_BROKER,
        value_deserializer=lambda x: json.loads(x.decode('utf-8')),
        auto_offset_reset='earliest',
        enable_auto_commit=True,
        group_id='friend-recommendation-group'
    )
    logging.info(f"‚úÖ Consumer k·∫øt n·ªëi t·ªõi topic: {TOPIC_INTERACTION}")
except Exception as e:
    logging.error(f"üö® L·ªói khi t·∫°o KafkaConsumer cho {TOPIC_INTERACTION}: {e}")
    exit(1)

# Kafka Consumer cho user interests
try:
    consumer_interests = KafkaConsumer(
        TOPIC_INPUT,
        bootstrap_servers=KAFKA_BROKER,
        value_deserializer=lambda x: json.loads(x.decode('utf-8')),
        auto_offset_reset='earliest',
        enable_auto_commit=True,
        group_id='friend-recommendation-group'
    )
    logging.info(f"‚úÖ Consumer k·∫øt n·ªëi t·ªõi topic: {TOPIC_INPUT}")
except Exception as e:
    logging.error(f"üö® L·ªói khi t·∫°o KafkaConsumer cho {TOPIC_INPUT}: {e}")
    exit(1)

# Kafka Producer
try:
    producer = KafkaProducer(
        bootstrap_servers=KAFKA_BROKER,
        value_serializer=lambda x: json.dumps(x).encode('utf-8')
    )
    logging.info("‚úÖ KafkaProducer ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng!")
except Exception as e:
    logging.error(f"üö® L·ªói khi t·∫°o KafkaProducer: {e}")
    exit(1)

# Ki·ªÉm tra Consumer c√≥ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn kh√¥ng
logging.info("üéØ ƒêang l·∫Øng nghe tin nh·∫Øn t·ª´ Kafka...")

for message in consumer:
    logging.info(f"üì© Nh·∫≠n tin nh·∫Øn t·ª´ {TOPIC_INTERACTION}: {message.value}")


# Schema d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ Kafka
schema = StructType([
    StructField("userId", StringType(), True),
    StructField("targetUserId", StringType(), True),
    StructField("likes", IntegerType(), True),
    StructField("comments", IntegerType(), True),
    StructField("follows", IntegerType(), True),
    StructField("messages", IntegerType(), True)
])
# Schema cho s·ªü th√≠ch ng∆∞·ªùi d√πng
interest_schema = StructType([
    StructField("userId", StringType(), True),
    StructField("interests", StringType(), True)  # L∆∞u danh s√°ch s·ªü th√≠ch d∆∞·ªõi d·∫°ng chu·ªói JSON
])

def train_content_based_filtering():
    user_interests_data = []

    for msg in consumer_interests:
        user_interests_data.append(msg.value)

    if not user_interests_data:
        return None

    df = spark.createDataFrame(user_interests_data, schema=interest_schema)

    # T√°ch danh s√°ch s·ªü th√≠ch t·ª´ JSON
    df = df.withColumn("interests", from_json(col("interests"), ArrayType(StringType())))

    # Word2Vec ƒë·ªÉ chuy·ªÉn s·ªü th√≠ch th√†nh vector
    word2vec = Word2Vec(vectorSize=10, minCount=1, inputCol="interests", outputCol="interestVector")
    model = word2vec.fit(df)
    df = model.transform(df)

    return df.select("userId", "interestVector")
def train_collaborative_filtering():
    user_interactions_data = []
    for msg in consumer_interactions:
        user_interactions_data.append(msg.value)

    if not user_interactions_data:
        return None

    df = spark.createDataFrame(user_interactions_data, schema=interaction_schema)

    # T√≠nh ƒëi·ªÉm t∆∞∆°ng t√°c
    df = df.withColumn("interactionScore", col("likes")*2 + col("comments")*3 + col("follows")*5 + col("messages")*10)

    # Hu·∫•n luy·ªán m√¥ h√¨nh ALS
    als = ALS(userCol="userId", itemCol="targetUserId", ratingCol="interactionScore", coldStartStrategy="drop")
    model = als.fit(df)

    recommendations = model.recommendForAllUsers(10)

    return recommendations
def hybrid_recommendations():
    cbf_result = train_content_based_filtering()
    cf_result = train_collaborative_filtering()

    if cbf_result is None and cf_result is None:
        return jsonify({"status": "error", "message": "No data available"})

    if cf_result is not None:
        cf_result = cf_result.toPandas()

    if cbf_result is not None:
        cbf_result = cbf_result.toPandas()

    # K·∫øt h·ª£p hai k·∫øt qu·∫£ (∆∞u ti√™n ng∆∞·ªùi c√≥ ƒëi·ªÉm cao t·ª´ c·∫£ 2 ph∆∞∆°ng ph√°p)
    hybrid_scores = {}

    if cf_result is not None:
        for _, row in cf_result.iterrows():
            user_id = row["userId"]
            for rec in row["recommendations"]:
                target_id = rec["targetUserId"]
                score = rec["rating"]
                hybrid_scores[(user_id, target_id)] = hybrid_scores.get((user_id, target_id), 0) + score

    if cbf_result is not None:
        for _, row in cbf_result.iterrows():
            user_id = row["userId"]
            for _, rec_row in cbf_result.iterrows():
                target_id = rec_row["userId"]
                if user_id != target_id:
                    score = sum(row["interestVector"] * rec_row["interestVector"])  # T√≠ch v√¥ h∆∞·ªõng
                    hybrid_scores[(user_id, target_id)] = hybrid_scores.get((user_id, target_id), 0) + score

    # Chuy·ªÉn k·∫øt qu·∫£ th√†nh danh s√°ch g·ª£i √Ω
    recommendations = {}
    for (user_id, target_id), score in sorted(hybrid_scores.items(), key=lambda x: -x[1])[:5]:
        if user_id not in recommendations:
            recommendations[user_id] = []
        recommendations[user_id].append({"recommendedUserId": target_id, "score": score})

    # G·ª≠i k·∫øt qu·∫£ v·ªÅ Kafka
    for user_id, recs in recommendations.items():
        producer.send(TOPIC_OUTPUT, {"userId": user_id, "recommendations": recs})

    return jsonify({"status": "success", "message": "Hybrid recommendations generated and sent to Kafka."})

@app.route('/health', methods=['GET'])
def health_check():
    """
    Ki·ªÉm tra t√¨nh tr·∫°ng service
    ---
    responses:
      200:
        description: Service ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
    """
    return jsonify({"status": "running"}), 200

@app.route("/train/hybrid_recommendations", methods=["POST"])
def train_hybrid():
    """
    K·∫øt h·ª£p Content-Based Filtering v√† Collaborative Filtering ƒë·ªÉ t·∫°o danh s√°ch g·ª£i √Ω
    ---
    responses:
      200:
        description: Th√†nh c√¥ng
    """
    return hybrid_recommendations()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001 ,debug=True)
